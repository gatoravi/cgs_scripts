#!/usr/bin/env perl
#This script is essentially from Travis Abbott ! Thanks Travis.
use strict;
use warnings;
use above 'Genome';
use Data::Dumper;
use Test::More;
use Genome::File::Breakdancer::Reader;
use Genome::File::BedPe::Header;
use Genome::File::Breakdancer::ToBedPe;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

sub usage
{
  print "Takes in two arguments 
  1. the sv.hq file from BreakDancer/SquareDancer output.
  2. the row prefix for each row for the 'name' column in BEDPE.
  3. the third argument is the slop (overlap added to each feature.) [15]"
}

sub convert
{
  my $bedpe_f = shift;
  my $prefix = shift;
  my $slop = shift;
  # Parse the 3 breakdancer records for subsequent use
  open my $fh1, "<", $bedpe_f;
  my $reader = Genome::File::Breakdancer::Reader->fhopen($fh1, "test");
  my @entries;
  while (my $entry = $reader->next) {
    push @entries, $entry;
  }
  my $bpe_header = new Genome::File::BedPe::Header([]);
  $bpe_header->set_custom_fields("size", "lib1_count", "lib2_count", "type", "num_reads");

  my $name_idx = 0;
  my $name_gen = sub {
    ++$name_idx;
    return $prefix . "-$name_idx";
  };

  my $converter = new Genome::File::Breakdancer::ToBedPe($bpe_header, $slop, $name_gen);
  $converter->add_generated("size", sub {
      my $entry = shift;
      return $entry->{size};
  });

  $converter->add_generated("num_reads", sub {
      my $entry = shift;
      return $entry->{num_reads};
  });

  $converter->add_generated("type", sub {
      my $entry = shift;
      return $entry->{type};
  });

  for my $i (1..2) {
    $converter->add_generated("lib${i}_count", sub {
        my $entry = shift;
        return $entry->lib_read_count("lib$i");
      });
  }

  my @converted = map {$converter->convert($_)} @entries;
  foreach my $converted1 (@converted) {
    print $converted1->to_string . "\n";
  }
}

sub main() {
  my $bedpe_f = $ARGV[0];
  my $prefix = $ARGV[1];
  my $slop = $ARGV[2] || 15;
  unless (scalar @ARGV >= 2) {
    die usage()
  }
  unless($bedpe_f && -e $bedpe_f) {
    die "Unable to find BEDPE file. Please specify correctly.";
  }
  print STDERR "converting " . $bedpe_f;
  convert($bedpe_f, $prefix, $slop);
}

main();
